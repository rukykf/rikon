const { DateTime } = require("luxon")
const Objection = require("../objection-config")

class PurchaseRequisitionNoteItem extends Objection {
  static get tableName() {
    return "purchase_requisition_note_items"
  }

  static get jsonSchema() {
    return {
      type: "object",
      required: ["store_item_id", "unit_id"],
      properties: {
        id: { type: "integer" },
        date: { type: "string" },
        created_at: { type: "string" },
        purchase_requisition_note_id: { type: "integer" },
        store_item_id: { type: "integer" },
        unit_id: { type: "integer" },
        current_stock_balance: { type: "number" },
        quantity_requested: { type: "number" },
        current_market_price: { type: "number" },
        last_purchase_price: { type: "number" },
        estimated_total_cost: { type: "number" },
        remarks: { type: "string" },
        active: { type: "boolean" }
      }
    }
  }

  static get relationMappings() {
    const PurchaseRequisitionNote = require("./PurchaseRequisitionNote")
    const Unit = require("./Unit")
    const StoreItem = require("./StoreItem")

    return {
      purchase_requisition_note: {
        relation: Objection.BelongsToOneRelation,
        modelClass: PurchaseRequisitionNote,
        join: {
          from: "purchase_requisition_note_items.purchase_requisition_note_id",
          to: "purchase_requisition_notes.id"
        }
      },

      unit: {
        relation: Objection.HasOneRelation,
        modelClass: Unit,
        join: {
          from: "purchase_requisition_note_items.unit_id",
          to: "units.id"
        }
      },

      store_item: {
        relation: Objection.HasOneRelation,
        modelClass: StoreItem,
        join: {
          from: "purchase_requisition_note_items.store_item_id",
          to: "store_items.id"
        }
      }
    }
  }

  $beforeInsert(queryContext) {
    // The date column can be selected by the user for a particular record
    // while created_at is generated by the system as the undisputable time the record was created

    if (this.created_at == null) {
      this.created_at = DateTime.local().toISO()
    }

    super.$beforeInsert(queryContext)
  }
}

module.exports = PurchaseRequisitionNoteItem
